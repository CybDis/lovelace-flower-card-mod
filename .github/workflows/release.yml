# GitHub Actions Workflow: Automatisches Release-System
# 
# Diese Workflow erstellt automatisch ein neues Release wenn die package.json 
# auf dem master/main Branch geändert wird. Sie besteht aus zwei Jobs:
# 
# 1. BUILD JOB:
#    - Prüft ob ein Tag für die aktuelle Version bereits existiert
#    - Baut das Projekt mit Node.js und npm
#    - Committed und pusht die Build-Artefakte zurück ins Repository
# 
# 2. AUTO-RELEASE JOB:
#    - Erstellt einen neuen Git-Tag für die Version
#    - Generiert automatisch ein Changelog seit dem letzten Release
#    - Erstellt ein GitHub Release (stable oder beta je nach Versionsnummer)
#
# Die Workflow wird nur ausgelöst wenn package.json geändert wird, um 
# sicherzustellen dass nur bei Versionsupdates ein Release erstellt wird.
#
---
name: "Auto Release"

# TRIGGER: Workflow startet bei Tag-Push (v*) für Releases
on:
  push:
    tags:
      - 'v*'

jobs:
  # =====================================================================
  # BUILD JOB: Erstellt Build-Artefakte und prüft Versionskonsistenz
  # =====================================================================
  build:
    name: "Build Release"
    runs-on: "ubuntu-latest"
    steps:
      # SCHRITT 1: Code aus Repository auschecken
      - name: "Checkout code"
        uses: actions/checkout@v4
        with: 
          path: './'
          
      # SCHRITT 2: Versionsnummer aus Git-Tag extrahieren
      # Entfernt das "v" Prefix vom Tag-Namen
      - name: "Get version tag"
        id: set_var
        run: echo "COMPONENT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
 
      # SCHRITT 3: Node.js Umgebung einrichten für Build-Prozess
      - name: "Build using Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      # SCHRITT 6: Dependencies installieren (npm ci für reproduzierbare Builds)
      - run: npm ci
      
      # SCHRITT 7: Build-Script ausführen (falls vorhanden in package.json)
      - run: npm run build --if-present

      # SCHRITT 8: Build-Artefakte committen
      # Git-Konfiguration für automatische Commits
      - name: "Commit files"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git status
          git commit -m "Add new build" -a
          
      # SCHRITT 9: Änderungen zurück ins Repository pushen
      # Build-Artefakte werden für Release verfügbar gemacht
      - name: "Push changes"
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  
  # =====================================================================
  # AUTO-RELEASE JOB: Erstellt GitHub Release mit Changelog
  # =====================================================================
  auto-release:
    name: "Auto Release"
    runs-on: "ubuntu-latest"
    needs: build  # Wartet bis Build-Job erfolgreich abgeschlossen ist
    steps:
      # SCHRITT 1: Aktuellen Code auschecken (mit Build-Artefakten)
      - name: "Checkout new code"
        uses: actions/checkout@v4
        with: 
          ref: master  # Explizit master branch um Build-Artefakte zu erhalten
          path: './'

      # SCHRITT 2: Version aus Git-Tag extrahieren (erneut nach Build)
      - name: "Get version tag"
        id: set_var
        run: echo "COMPONENT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # SCHRITT 3: Aktuellen Git SHA für Tag-Erstellung ermitteln
      - name: "Get git sha"
        id: set_var_2
        run: echo "CURRENT_SHA=$(git log -1 --format='%H')" >> $GITHUB_ENV

      # SCHRITT 4: Letztes Release ermitteln für Changelog-Generierung
      - name: "Get previous release version"
        id: last_release
        uses: pozetroninc/github-action-get-latest-release@v0.8.0
        with:
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          excludes: "draft"

      # SCHRITT 5: Changelog automatisch generieren
      # Erstellt Release Notes basierend auf Commits seit letztem Release
      - name: "Generate release changelog"
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          sinceTag: ${{ steps.last_release.outputs.release }}  # Nur Änderungen seit letztem Release
          headerLabel: "# Notable changes since ${{ steps.last_release.outputs.release }}"
          stripGeneratorNotice: true  # Generator-Hinweis entfernen

      # SCHRITT 6a: Stabiles Release erstellen (für normale Versionen)
      # Wird nur ausgeführt wenn Version NICHT "beta" enthält
      - name: Create Stable release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false  # Markiert als stabile Version
          body: "${{ steps.changelog.outputs.changelog }}"
          name: "Version ${{ env.COMPONENT_VERSION }}"
          tag_name: "v${{ env.COMPONENT_VERSION }}"
          target_commitish: "${{ env.CURRENT_SHA }}"
        if: contains(env.COMPONENT_VERSION, 'beta') == false

      # SCHRITT 6b: Beta-Release erstellen (für Beta-Versionen)
      # Wird nur ausgeführt wenn Version "beta" enthält
      - name: Create Beta release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true  # Markiert als Vorabversion
          body: "${{ steps.changelog.outputs.changelog }}"
          name: "Version ${{ env.COMPONENT_VERSION }}"
          tag_name: "v${{ env.COMPONENT_VERSION }}"
          target_commitish: "${{ env.CURRENT_SHA }}"
        if: contains(env.COMPONENT_VERSION, 'beta') == true
